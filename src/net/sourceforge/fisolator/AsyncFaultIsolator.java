package net.sourceforge.fisolator;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/**
 * todo: provide comments for class ${CLASSNAME}
 * User: Pavel Syrtsov
 * Date: Aug 24, 2008
 * Time: 10:37:56 AM
 */
public class AsyncFaultIsolator {
    private long startTime = System.currentTimeMillis();
    private List<TaskData> taskDataList = new ArrayList<TaskData>();
    private final Map<FeatureFaultIsolator,AtomicInteger> featureCounterMap = new HashMap<FeatureFaultIsolator, AtomicInteger>();
    private ExecutorService executor;

    public AsyncFaultIsolator(ExecutorService executor) {
        this.executor = executor;
    }

    public boolean invoke(final Runnable runnable, final FeatureFaultIsolator ... featureList) {
        final AtomicInteger activeTaskCounterList[] = getCounterList(featureList);
        for (AtomicInteger activeTaskPerFeatureCounter : activeTaskCounterList) {
            activeTaskPerFeatureCounter.getAndIncrement();
        }
        if(!FaultIsolatorHelper.taskStart(featureList)) {
            // note that activeTaskPerFeatureCounter is not go to decrement
            // and feature data will be marked as unavailable
            return false;
        }
        Future<?> future = executor.submit(new Runnable() {
            public void run() {
                try {
                    runnable.run();
                    for (AtomicInteger activeTaskPerFeatureCounter : activeTaskCounterList) {
                        activeTaskPerFeatureCounter.getAndDecrement();
                    }
                } finally {
                    FaultIsolatorHelper.taskStopped(featureList);
                }
            }
        });
        TaskData taskData = new TaskData(future, featureList);
        taskDataList.add(taskData);
        return true;
    }

    private AtomicInteger[] getCounterList(FeatureFaultIsolator[] featureList) {
        AtomicInteger[] res = new AtomicInteger[featureList.length];
        for (int i = 0; i < featureList.length; i++) {
            FeatureFaultIsolator feature = featureList[i];
            res[i] = getCounter(feature);
        }
        return res;
    }

    /**
     * todo: there got to be better name for this method
     * @param timeOut - defines how long to wait STARTING FROM MOMENT OF CREATION OF THIS OBJECT
     * @throws ExecutionException - exception that had been generated by Runnable submitted before
     * @throws TimeoutException - wait for all Runnables to finish timed out
     * @throws InterruptedException - wait had been interrupted
     */
    public void waitToComplete(long timeOut) throws ExecutionException, TimeoutException, InterruptedException {
        for (TaskData taskData : taskDataList) {
            long timeLeft = timeOut - (System.currentTimeMillis() - startTime);
            if (timeLeft <= 0L) {
                throw new TimeoutException();
            }
            try {
                taskData.future.get(timeLeft, TimeUnit.MILLISECONDS);
            } catch (TimeoutException e) {
                handleTimeOut();
                throw e;
            }
        }
    }

    private void handleTimeOut() {
        for (TaskData taskData : taskDataList) {
            if (!taskData.future.isDone()) {
                 FaultIsolatorHelper.taskTimedOut(taskData.featureList);
            }
        }
    }

    public AtomicInteger getCounter(FeatureFaultIsolator feature) {
        AtomicInteger res;
        synchronized (featureCounterMap) {
            res = featureCounterMap.get(feature);
            if (res == null) {
                res = new AtomicInteger(0);
                featureCounterMap.put(feature, res);
            }
        }
        return res;
    }

    private static class TaskData {
        private final Future<?> future;
        private final FeatureFaultIsolator[] featureList;

        public TaskData(Future<?> future, FeatureFaultIsolator[] featureList) {
            this.future = future;
            this.featureList = featureList;
        }

        public Future<?> getFuture() {
            return future;
        }

        public FeatureFaultIsolator[] getFeatureList() {
            return featureList;
        }
    }
}
